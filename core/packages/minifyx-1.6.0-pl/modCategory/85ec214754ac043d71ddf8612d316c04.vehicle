<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      '6721eac36625b237b3efdab710203a42' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":1,"property_preprocess":0,"name":"MinifyX","description":"MinifyX is a snippet the allows you to combine and minify JS and CSS files","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/** @var array $scriptProperties *\\/\\r\\n\\/** @var MinifyX $MinifyX *\\/\\r\\nif (isset($modx->minifyx) && $modx->minifyx instanceof MinifyX) {\\r\\n    $MinifyX = $modx->minifyx;\\r\\n    $MinifyX->reset($scriptProperties);\\r\\n} else {\\r\\n    $MinifyX = $modx->getService(\'minifyx\', \'MinifyX\', MODX_CORE_PATH . \'components\\/minifyx\\/model\\/minifyx\\/\', $scriptProperties);\\r\\n}\\r\\n\\r\\n$sources = $MinifyX->prepareSources();\\r\\n\\r\\nforeach ($sources as $type => $value) {\\r\\n    if (empty($value)) {continue;}\\r\\n\\/\\/    $filename = $MinifyX->config[$type.\'Filename\'] . \'_\';\\r\\n\\/\\/    $extension = $MinifyX->config[$type.\'Ext\'];\\r\\n    $register = $MinifyX->config[\'register\'.ucfirst($type)];\\r\\n    $placeholder = !empty($MinifyX->config[$type.\'Placeholder\'])\\r\\n        ? $MinifyX->config[$type.\'Placeholder\']\\r\\n        : \'\';\\r\\n\\r\\n    $files = $MinifyX->prepareFiles($value, $type);\\r\\n    $properties = array(\\r\\n        \'minify\' => $MinifyX->config[\'minify\'.ucfirst($type)]\\r\\n            ? \'true\'\\r\\n            : \'false\',\\r\\n    );\\r\\n    $result = $MinifyX->Munee($files, $properties);\\r\\n    \\/\\/ Register file on frontend\\r\\n    if ($MinifyX->saveFile($result)) {\\r\\n        $tag = str_replace(\'[[+file]]\', $MinifyX->getFileUrl(), $type == \'css\' ? $cssTpl : $jsTpl);\\r\\n        switch ($register) {\\r\\n        \\tcase \'placeholder\':\\r\\n                if ($register == \'placeholder\' && $placeholder) {\\r\\n                    $modx->setPlaceholder($placeholder, $tag);\\r\\n                }\\r\\n        \\t\\tbreak;\\r\\n            case \'print\':\\r\\n                return $tag;\\r\\n            default:\\r\\n                if ($type == \'css\') {\\r\\n                    $modx->regClientCSS($tag);\\r\\n                }\\r\\n                else {\\r\\n                    if ($register == \'startup\') {\\r\\n                        $modx->regClientStartupScript($tag);\\r\\n                    }\\r\\n                    else {\\r\\n                        $modx->regClientScript($tag);\\r\\n                    }\\r\\n                }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nreturn;","locked":0,"properties":"a:17:{s:9:\\"jsSources\\";a:7:{s:4:\\"name\\";s:9:\\"jsSources\\";s:4:\\"desc\\";s:22:\\"minifyx_prop_jsSources\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"cssSources\\";a:7:{s:4:\\"name\\";s:10:\\"cssSources\\";s:4:\\"desc\\";s:23:\\"minifyx_prop_cssSources\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"minifyJs\\";a:7:{s:4:\\"name\\";s:8:\\"minifyJs\\";s:4:\\"desc\\";s:21:\\"minifyx_prop_minifyJs\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"minifyCss\\";a:7:{s:4:\\"name\\";s:9:\\"minifyCss\\";s:4:\\"desc\\";s:22:\\"minifyx_prop_minifyCss\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"jsFilename\\";a:7:{s:4:\\"name\\";s:10:\\"jsFilename\\";s:4:\\"desc\\";s:23:\\"minifyx_prop_jsFilename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:7:\\"scripts\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"cssFilename\\";a:7:{s:4:\\"name\\";s:11:\\"cssFilename\\";s:4:\\"desc\\";s:24:\\"minifyx_prop_cssFilename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:6:\\"styles\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"registerJs\\";a:7:{s:4:\\"name\\";s:10:\\"registerJs\\";s:4:\\"desc\\";s:23:\\"minifyx_prop_registerJs\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:5:\\"value\\";s:11:\\"placeholder\\";s:4:\\"text\\";s:11:\\"Placeholder\\";}i:1;a:2:{s:5:\\"value\\";s:7:\\"startup\\";s:4:\\"text\\";s:14:\\"Startup script\\";}i:2;a:2:{s:5:\\"value\\";s:7:\\"default\\";s:4:\\"text\\";s:7:\\"Default\\";}i:3;a:2:{s:5:\\"value\\";s:5:\\"print\\";s:4:\\"text\\";s:5:\\"Print\\";}}s:5:\\"value\\";s:11:\\"placeholder\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"jsPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"jsPlaceholder\\";s:4:\\"desc\\";s:26:\\"minifyx_prop_jsPlaceholder\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:18:\\"MinifyX.javascript\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"registerCss\\";a:7:{s:4:\\"name\\";s:11:\\"registerCss\\";s:4:\\"desc\\";s:24:\\"minifyx_prop_registerCss\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:3:{i:0;a:2:{s:5:\\"value\\";s:11:\\"placeholder\\";s:4:\\"text\\";s:11:\\"Placeholder\\";}i:1;a:2:{s:5:\\"value\\";s:7:\\"default\\";s:4:\\"text\\";s:7:\\"Default\\";}i:2;a:2:{s:5:\\"value\\";s:5:\\"print\\";s:4:\\"text\\";s:5:\\"Print\\";}}s:5:\\"value\\";s:11:\\"placeholder\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"cssPlaceholder\\";a:7:{s:4:\\"name\\";s:14:\\"cssPlaceholder\\";s:4:\\"desc\\";s:27:\\"minifyx_prop_cssPlaceholder\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:11:\\"MinifyX.css\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"jsGroups\\";a:7:{s:4:\\"name\\";s:8:\\"jsGroups\\";s:4:\\"desc\\";s:21:\\"minifyx_prop_jsGroups\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"cssGroups\\";a:7:{s:4:\\"name\\";s:9:\\"cssGroups\\";s:4:\\"desc\\";s:22:\\"minifyx_prop_cssGroups\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"preHooks\\";a:7:{s:4:\\"name\\";s:8:\\"preHooks\\";s:4:\\"desc\\";s:21:\\"minifyx_prop_preHooks\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"hooks\\";a:7:{s:4:\\"name\\";s:5:\\"hooks\\";s:4:\\"desc\\";s:18:\\"minifyx_prop_hooks\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"cssTpl\\";a:7:{s:4:\\"name\\";s:6:\\"cssTpl\\";s:4:\\"desc\\";s:19:\\"minifyx_prop_cssTpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:58:\\"<link rel=\\"stylesheet\\" href=\\"[[+file]]\\" type=\\"text\\/css\\" \\/>\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"jsTpl\\";a:7:{s:4:\\"name\\";s:5:\\"jsTpl\\";s:4:\\"desc\\";s:18:\\"minifyx_prop_jsTpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:56:\\"<script type=\\"text\\/javascript\\" src=\\"[[+file]]\\"><\\/script>\\";s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"forceUpdate\\";a:7:{s:4:\\"name\\";s:11:\\"forceUpdate\\";s:4:\\"desc\\";s:24:\\"minifyx_prop_forceUpdate\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:18:\\"minifyx:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/minifyx\\/elements\\/snippets\\/snippet.minifyx.php","content":"\\/** @var array $scriptProperties *\\/\\r\\n\\/** @var MinifyX $MinifyX *\\/\\r\\nif (isset($modx->minifyx) && $modx->minifyx instanceof MinifyX) {\\r\\n    $MinifyX = $modx->minifyx;\\r\\n    $MinifyX->reset($scriptProperties);\\r\\n} else {\\r\\n    $MinifyX = $modx->getService(\'minifyx\', \'MinifyX\', MODX_CORE_PATH . \'components\\/minifyx\\/model\\/minifyx\\/\', $scriptProperties);\\r\\n}\\r\\n\\r\\n$sources = $MinifyX->prepareSources();\\r\\n\\r\\nforeach ($sources as $type => $value) {\\r\\n    if (empty($value)) {continue;}\\r\\n\\/\\/    $filename = $MinifyX->config[$type.\'Filename\'] . \'_\';\\r\\n\\/\\/    $extension = $MinifyX->config[$type.\'Ext\'];\\r\\n    $register = $MinifyX->config[\'register\'.ucfirst($type)];\\r\\n    $placeholder = !empty($MinifyX->config[$type.\'Placeholder\'])\\r\\n        ? $MinifyX->config[$type.\'Placeholder\']\\r\\n        : \'\';\\r\\n\\r\\n    $files = $MinifyX->prepareFiles($value, $type);\\r\\n    $properties = array(\\r\\n        \'minify\' => $MinifyX->config[\'minify\'.ucfirst($type)]\\r\\n            ? \'true\'\\r\\n            : \'false\',\\r\\n    );\\r\\n    $result = $MinifyX->Munee($files, $properties);\\r\\n    \\/\\/ Register file on frontend\\r\\n    if ($MinifyX->saveFile($result)) {\\r\\n        $tag = str_replace(\'[[+file]]\', $MinifyX->getFileUrl(), $type == \'css\' ? $cssTpl : $jsTpl);\\r\\n        switch ($register) {\\r\\n        \\tcase \'placeholder\':\\r\\n                if ($register == \'placeholder\' && $placeholder) {\\r\\n                    $modx->setPlaceholder($placeholder, $tag);\\r\\n                }\\r\\n        \\t\\tbreak;\\r\\n            case \'print\':\\r\\n                return $tag;\\r\\n            default:\\r\\n                if ($type == \'css\') {\\r\\n                    $modx->regClientCSS($tag);\\r\\n                }\\r\\n                else {\\r\\n                    if ($register == \'startup\') {\\r\\n                        $modx->regClientStartupScript($tag);\\r\\n                    }\\r\\n                    else {\\r\\n                        $modx->regClientScript($tag);\\r\\n                    }\\r\\n                }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nreturn;"}',
        'guid' => '60540a2b30cbbb95d7b2fcacd7e74af3',
        'native_key' => 0,
        'signature' => '2245f5bed58b8859c4f27c0ce7e365e6',
      ),
    ),
    'Plugins' => 
    array (
      '334a47f9f94d13c2c5df63df66344ce8' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":1,"property_preprocess":0,"name":"MinifyX","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"switch ($modx->event->name) {\\r\\n\\tcase \'OnSiteRefresh\':\\r\\n        \\/** @var MinifyX $MinifyX *\\/\\r\\n\\t\\tif ($MinifyX = $modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {\\r\\n\\t\\t\\tif ($MinifyX->clearCache()) {\\r\\n\\t\\t\\t\\t$modx->log(modX::LOG_LEVEL_INFO, $modx->lexicon(\'refresh_default\').\': MinifyX\');\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tbreak;\\r\\n\\tcase \'OnWebPagePrerender\':\\r\\n\\t\\t$time = microtime(true);\\r\\n\\t\\t\\/\\/ Process scripts and styles\\r\\n\\t\\tif ($modx->getOption(\'minifyx_process_registered\', null, false, true)) {\\r\\n\\t\\t\\t$current = array(\\r\\n\\t\\t\\t\\t\'head\' => $modx->sjscripts,\\r\\n\\t\\t\\t\\t\'body\' => $modx->jscripts,\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t$included = $excluded = $prepared = $raw = array(\\r\\n\\t\\t\\t\\t\'head\' => array(\'css\' => array(), \'js\' => array(), \'html\' => array()),\\r\\n\\t\\t\\t\\t\'body\' => array(\'css\' => array(), \'js\' => array(), \'html\' => array()),\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t$exclude = $modx->getOption(\'minifyx_exclude_registered\');\\r\\n\\r\\n\\t\\t\\t\\/\\/ Split all scripts and styles by type\\r\\n\\t\\t\\tforeach ($current as $key => $value) {\\r\\n\\t\\t\\t\\tforeach ($value as $v) {\\r\\n\\t\\t\\t\\t\\tif (preg_match(\'\\/<(?:link|script).*?(?:href|src)=[\\\\\'|\\"](.*?)[\\\\\'|\\"]\\/\', $v, $tmp)) {\\r\\n\\t\\t\\t\\t\\t\\tif (strpos($tmp[1], \'.css\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!empty($exclude) && preg_match($exclude, $tmp[1])) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$excluded[$key][\'css\'][] = $tmp[1];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$included[$key][\'css\'][] = $tmp[1];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif (strpos($tmp[1], \'.js\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!empty($exclude) && preg_match($exclude, $tmp[1])) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$excluded[$key][\'js\'][] = $tmp[1];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$included[$key][\'js\'][] = $tmp[1];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telseif (strpos($v, \'<script\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t$raw[$key][\'js\'][] = trim(preg_replace(\'#<!--.*?-->(\\\\n|)#s\', \'\', $v));\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telseif (strpos($v, \'<style\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t$raw[$key][\'css\'][] = trim(preg_replace(\'#\\/\\\\*.*?\\\\*\\/(\\\\n|)#s\', \'\', $v));\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t$excluded[$key][\'html\'][] = $v;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\/\\/ Main options for MinifyX\\r\\n\\t\\t\\t$scriptProperties = array(\\r\\n\\t\\t\\t\\t\'cacheFolder\' => $modx->getOption(\'minifyx_cacheFolder\', null, \'\\/assets\\/components\\/minifyx\\/cache\\/\', true),\\r\\n\\t\\t\\t\\t\'forceUpdate\' => $modx->getOption(\'minifyx_forceUpdate\', null, false, true),\\r\\n\\t\\t\\t\\t\'minifyJs\' => $modx->getOption(\'minifyx_minifyJs\', null, false, true),\\r\\n\\t\\t\\t\\t\'minifyCss\' => $modx->getOption(\'minifyx_minifyCss\', null, false, true),\\r\\n\\t\\t\\t\\t\'jsFilename\' => $modx->getOption(\'minifyx_jsFilename\', null, \'all\', true),\\r\\n\\t\\t\\t\\t\'cssFilename\' => $modx->getOption(\'minifyx_cssFilename\', null, \'all\', true),\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t\\/** @var MinifyX $MinifyX *\\/\\r\\n\\t\\t\\tif (isset($modx->minifyx) && $modx->minifyx instanceof MinifyX) {\\r\\n                $MinifyX = $modx->minifyx;\\r\\n                $MinifyX->reset($scriptProperties);\\r\\n            } else {\\r\\n                $MinifyX = $modx->getService(\'minifyx\', \'MinifyX\', MODX_CORE_PATH . \'components\\/minifyx\\/model\\/minifyx\\/\', $scriptProperties);\\r\\n            }\\r\\n\\t\\t\\tif (!$MinifyX->prepareCacheFolder()) {\\r\\n\\t\\t\\t\\t$this->modx->log(modX::LOG_LEVEL_ERROR, \'[MinifyX] Could not create cache dir \\"\'.$scriptProperties[\'cacheFolderPath\'].\'\\"\');\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\/\\/$cacheFolderUrl = $MinifyX->config[\'cacheFolder\'];\\r\\n\\r\\n\\t\\t\\t\\/\\/ Process raw scripts and styles\\r\\n\\t\\t\\t$tmp_dir = $MinifyX->getTmpDir() . \'resources\\/\' . $modx->resource->id . \'\\/\';\\r\\n\\t\\t\\tforeach ($raw as $key => $value) {\\r\\n\\t\\t\\t\\tforeach ($value as $type => $rows) {\\r\\n\\t\\t\\t\\t\\t$tmp = \'\';\\r\\n\\t\\t\\t\\t\\tif ($type == \'css\' && $modx->getOption(\'minifyx_processRawCss\', null, false, true) ||\\r\\n\\t\\t\\t\\t\\t\\t$type == \'js\' && $modx->getOption(\'minifyx_processRawJs\', null, false, true)) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t$text = \'\';\\r\\n\\t\\t\\t\\t\\t\\tforeach ($rows as $text) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$text = preg_replace(\'#^<(script|style).*?>#\', \'\', $text);\\r\\n\\t\\t\\t\\t\\t\\t\\t$text = preg_replace(\'#<\\/(script|style)>$#\', \'\', $text);\\r\\n\\t\\t\\t\\t\\t\\t\\t$tmp .= $text;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (!empty($tmp)) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$file = sha1($tmp) . \'.\' . $type;\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!file_exists($tmp_dir . $file)) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!file_exists($tmp_dir)) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t$MinifyX->makeDir($tmp_dir);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfile_put_contents($tmp_dir . $file, $tmp);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t$included[$key][$type][] = $tmp_dir . $file;\\r\\n\\t\\t\\t\\t\\t\\t\\t$raw[$key][$type] = array();\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\/\\/ Combine and minify files\\r\\n\\t\\t\\tforeach ($included as $key => $value) {\\r\\n\\t\\t\\t\\tforeach ($value as $type => $files) {\\r\\n\\t\\t\\t\\t\\tif (empty($files)) {continue;}\\r\\n\\/\\/\\t\\t\\t\\t\\t$filename = $MinifyX->config[$type.\'Filename\'] . \'_\';\\r\\n\\/\\/\\t\\t\\t\\t\\t$extension = $MinifyX->config[$type.\'Ext\'];\\r\\n\\t\\t\\t\\t\\t$files = $MinifyX->prepareFiles($files, $type);\\r\\n\\t\\t\\t\\t\\t$properties = array(\\r\\n\\t\\t\\t\\t\\t\\t\'minify\' => $MinifyX->config[\'minify\'.ucfirst($type)]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t? \'true\'\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t: \'false\',\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t$result = $MinifyX->Munee($files, $properties);\\r\\n\\t\\t\\t\\t\\tif ($MinifyX->saveFile($result)) {\\r\\n                        $prepared[$key][$type][] = $MinifyX->getFileUrl();\\r\\n                    }\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\/\\/ Combine files by type\\r\\n\\t\\t\\t$final = array(\\r\\n\\t\\t\\t\\t\'head\' => array_merge(\\r\\n\\t\\t\\t\\t\\t$excluded[\'head\'][\'css\'], $prepared[\'head\'][\'css\'], $raw[\'head\'][\'css\'],\\r\\n\\t\\t\\t\\t\\t$excluded[\'head\'][\'js\'], $prepared[\'head\'][\'js\'], $raw[\'head\'][\'js\']\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\'body\' => array_merge(\\r\\n\\t\\t\\t\\t\\t$excluded[\'body\'][\'css\'], $prepared[\'body\'][\'css\'], $raw[\'body\'][\'css\'],\\r\\n\\t\\t\\t\\t\\t$excluded[\'body\'][\'js\'], $prepared[\'body\'][\'js\'], $raw[\'body\'][\'js\']\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\/\\/ Push files to tags\\r\\n\\t\\t\\tforeach ($final as $type => &$value) {\\r\\n\\t\\t\\t\\tforeach ($value as &$file) {\\r\\n\\t\\t\\t\\t\\tif (strpos($file, \'<script\') === false && strpos($file, \'<style\') === false) {\\r\\n\\t\\t\\t\\t\\t\\t$file = preg_match(\'\\/\\\\.css$\\/iu\', $file)\\r\\n\\t\\t\\t\\t\\t\\t\\t? \'<link rel=\\"stylesheet\\" href=\\"\' . $file . \'\\" type=\\"text\\/css\\" \\/>\'\\r\\n\\t\\t\\t\\t\\t\\t\\t: \'<script type=\\"text\\/javascript\\" src=\\"\' . $file . \'\\"><\\/script>\';\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (!empty($excluded[$type][\'html\'])) {\\r\\n\\t\\t\\t\\t\\t$value[] = implode(\\"\\\\n\\", $excluded[$type][\'html\']);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tunset($value);\\r\\n\\r\\n\\t\\t\\t\\/\\/ Replace tags in web page\\r\\n\\t\\t\\t$modx->resource->_output = str_replace(\\r\\n\\t\\t\\t\\tarray($modx->getRegisteredClientStartupScripts() . \\"\\\\n<\\/head>\\", $modx->getRegisteredClientScripts() . \\"\\\\n<\\/body>\\"),\\r\\n\\t\\t\\t\\tarray(implode(\\"\\\\n\\", $final[\'head\']) . \\"\\\\n<\\/head>\\", implode(\\"\\\\n\\", $final[\'body\']) . \\"\\\\n<\\/body>\\"),\\r\\n\\t\\t\\t\\t$modx->resource->_output\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t\\/\\/ Process images\\r\\n\\t\\tif ($modx->getOption(\'minifyx_process_images\', null, false, true)) {\\r\\n\\t\\t\\tif (!$modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {return false;}\\r\\n\\r\\n\\t\\t\\t$connector = $modx->getOption(\'minifyx_connector\', null, \'\\/assets\\/components\\/minifyx\\/munee.php\', true);\\r\\n\\t\\t\\t$exclude = $modx->getOption(\'minifyx_exclude_images\');\\r\\n\\t\\t\\t$replace = array(\'from\' => array(), \'to\' => array());\\r\\n\\t\\t\\t$site_url = $modx->getOption(\'site_url\');\\r\\n\\t\\t\\t$default = $modx->getOption(\'minifyx_images_filters\', null, \'\', true);\\r\\n\\r\\n\\t\\t\\tpreg_match_all(\'\\/<img.*?>\\/i\', $modx->resource->_output, $tags);\\r\\n\\t\\t\\tforeach ($tags[0] as $tag) {\\r\\n\\t\\t\\t\\tif (preg_match($exclude, $tag)) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telseif (preg_match_all(\'\\/(src|height|width|filters)=[\\\\\'|\\"](.*?)[\\\\\'|\\"]\\/i\', $tag, $properties)) {\\r\\n\\t\\t\\t\\t\\tif (count($properties[0]) >= 2) {\\r\\n\\t\\t\\t\\t\\t\\t$file = $connector . \'?files=\';\\r\\n\\t\\t\\t\\t\\t\\t$resize = \'\';\\r\\n\\t\\t\\t\\t\\t\\t$filters = \'\';\\r\\n\\t\\t\\t\\t\\t\\t$tmp = array(\'from\' => array(), \'to\' => array());\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tforeach ($properties[1] as $k => $v) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif ($v == \'src\') {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$src = $properties[2][$k];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (strpos($src, \':\\/\\/\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (strpos($src, $site_url) !== false) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$src = str_replace($site_url, \'\', $src);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ Image from 3rd party domain\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$file .= $src;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'from\'][\'src\'] = $properties[2][$k];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\telseif ($v == \'height\' || $v == \'width\') {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$resize .=  $v[0] . \'[\'.$properties[2][$k].\']\';\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\telseif ($v == \'filters\') {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$filters .= $properties[2][$k];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'from\'][\'filters\'] = $properties[0][$k];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'to\'][\'filters\'] = \'\';\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (!empty($tmp[\'from\'][\'src\'])) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$resize .= isset($tmp[\'from\'][\'filters\'])\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t? $filters\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t: $default;\\r\\n\\t\\t\\t\\t\\t\\t\\t$tmp[\'to\'][\'src\'] = $file . \'?resize=\' . $resize;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tksort($tmp[\'from\']);\\r\\n\\t\\t\\t\\t\\t\\t\\tksort($tmp[\'to\']);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t$replace[\'from\'][] = $tag;\\r\\n\\t\\t\\t\\t\\t\\t\\t$replace[\'to\'][] = str_replace($tmp[\'from\'], $tmp[\'to\'], $tag);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!empty($replace)) {\\r\\n\\t\\t\\t\\t$modx->resource->_output = str_replace(\\r\\n\\t\\t\\t\\t\\t$replace[\'from\'],\\r\\n\\t\\t\\t\\t\\t$replace[\'to\'],\\r\\n\\t\\t\\t\\t\\t$modx->resource->_output\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t$modx->log(modX::LOG_LEVEL_INFO, \'[MinifyX] Total time for page \\"\'.$modx->resource->id.\'\\" = \'.(microtime(true) - $time));\\r\\n\\t\\tbreak;\\r\\n}","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"core\\/components\\/minifyx\\/elements\\/plugins\\/plugin.minifyx.php","content":"switch ($modx->event->name) {\\r\\n\\tcase \'OnSiteRefresh\':\\r\\n        \\/** @var MinifyX $MinifyX *\\/\\r\\n\\t\\tif ($MinifyX = $modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {\\r\\n\\t\\t\\tif ($MinifyX->clearCache()) {\\r\\n\\t\\t\\t\\t$modx->log(modX::LOG_LEVEL_INFO, $modx->lexicon(\'refresh_default\').\': MinifyX\');\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tbreak;\\r\\n\\tcase \'OnWebPagePrerender\':\\r\\n\\t\\t$time = microtime(true);\\r\\n\\t\\t\\/\\/ Process scripts and styles\\r\\n\\t\\tif ($modx->getOption(\'minifyx_process_registered\', null, false, true)) {\\r\\n\\t\\t\\t$current = array(\\r\\n\\t\\t\\t\\t\'head\' => $modx->sjscripts,\\r\\n\\t\\t\\t\\t\'body\' => $modx->jscripts,\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t$included = $excluded = $prepared = $raw = array(\\r\\n\\t\\t\\t\\t\'head\' => array(\'css\' => array(), \'js\' => array(), \'html\' => array()),\\r\\n\\t\\t\\t\\t\'body\' => array(\'css\' => array(), \'js\' => array(), \'html\' => array()),\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t$exclude = $modx->getOption(\'minifyx_exclude_registered\');\\r\\n\\r\\n\\t\\t\\t\\/\\/ Split all scripts and styles by type\\r\\n\\t\\t\\tforeach ($current as $key => $value) {\\r\\n\\t\\t\\t\\tforeach ($value as $v) {\\r\\n\\t\\t\\t\\t\\tif (preg_match(\'\\/<(?:link|script).*?(?:href|src)=[\\\\\'|\\"](.*?)[\\\\\'|\\"]\\/\', $v, $tmp)) {\\r\\n\\t\\t\\t\\t\\t\\tif (strpos($tmp[1], \'.css\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!empty($exclude) && preg_match($exclude, $tmp[1])) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$excluded[$key][\'css\'][] = $tmp[1];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$included[$key][\'css\'][] = $tmp[1];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif (strpos($tmp[1], \'.js\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!empty($exclude) && preg_match($exclude, $tmp[1])) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$excluded[$key][\'js\'][] = $tmp[1];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$included[$key][\'js\'][] = $tmp[1];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telseif (strpos($v, \'<script\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t$raw[$key][\'js\'][] = trim(preg_replace(\'#<!--.*?-->(\\\\n|)#s\', \'\', $v));\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telseif (strpos($v, \'<style\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t$raw[$key][\'css\'][] = trim(preg_replace(\'#\\/\\\\*.*?\\\\*\\/(\\\\n|)#s\', \'\', $v));\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t$excluded[$key][\'html\'][] = $v;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\/\\/ Main options for MinifyX\\r\\n\\t\\t\\t$scriptProperties = array(\\r\\n\\t\\t\\t\\t\'cacheFolder\' => $modx->getOption(\'minifyx_cacheFolder\', null, \'\\/assets\\/components\\/minifyx\\/cache\\/\', true),\\r\\n\\t\\t\\t\\t\'forceUpdate\' => $modx->getOption(\'minifyx_forceUpdate\', null, false, true),\\r\\n\\t\\t\\t\\t\'minifyJs\' => $modx->getOption(\'minifyx_minifyJs\', null, false, true),\\r\\n\\t\\t\\t\\t\'minifyCss\' => $modx->getOption(\'minifyx_minifyCss\', null, false, true),\\r\\n\\t\\t\\t\\t\'jsFilename\' => $modx->getOption(\'minifyx_jsFilename\', null, \'all\', true),\\r\\n\\t\\t\\t\\t\'cssFilename\' => $modx->getOption(\'minifyx_cssFilename\', null, \'all\', true),\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t\\/** @var MinifyX $MinifyX *\\/\\r\\n\\t\\t\\tif (isset($modx->minifyx) && $modx->minifyx instanceof MinifyX) {\\r\\n                $MinifyX = $modx->minifyx;\\r\\n                $MinifyX->reset($scriptProperties);\\r\\n            } else {\\r\\n                $MinifyX = $modx->getService(\'minifyx\', \'MinifyX\', MODX_CORE_PATH . \'components\\/minifyx\\/model\\/minifyx\\/\', $scriptProperties);\\r\\n            }\\r\\n\\t\\t\\tif (!$MinifyX->prepareCacheFolder()) {\\r\\n\\t\\t\\t\\t$this->modx->log(modX::LOG_LEVEL_ERROR, \'[MinifyX] Could not create cache dir \\"\'.$scriptProperties[\'cacheFolderPath\'].\'\\"\');\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\/\\/$cacheFolderUrl = $MinifyX->config[\'cacheFolder\'];\\r\\n\\r\\n\\t\\t\\t\\/\\/ Process raw scripts and styles\\r\\n\\t\\t\\t$tmp_dir = $MinifyX->getTmpDir() . \'resources\\/\' . $modx->resource->id . \'\\/\';\\r\\n\\t\\t\\tforeach ($raw as $key => $value) {\\r\\n\\t\\t\\t\\tforeach ($value as $type => $rows) {\\r\\n\\t\\t\\t\\t\\t$tmp = \'\';\\r\\n\\t\\t\\t\\t\\tif ($type == \'css\' && $modx->getOption(\'minifyx_processRawCss\', null, false, true) ||\\r\\n\\t\\t\\t\\t\\t\\t$type == \'js\' && $modx->getOption(\'minifyx_processRawJs\', null, false, true)) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t$text = \'\';\\r\\n\\t\\t\\t\\t\\t\\tforeach ($rows as $text) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$text = preg_replace(\'#^<(script|style).*?>#\', \'\', $text);\\r\\n\\t\\t\\t\\t\\t\\t\\t$text = preg_replace(\'#<\\/(script|style)>$#\', \'\', $text);\\r\\n\\t\\t\\t\\t\\t\\t\\t$tmp .= $text;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (!empty($tmp)) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$file = sha1($tmp) . \'.\' . $type;\\r\\n\\t\\t\\t\\t\\t\\t\\tif (!file_exists($tmp_dir . $file)) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!file_exists($tmp_dir)) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t$MinifyX->makeDir($tmp_dir);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfile_put_contents($tmp_dir . $file, $tmp);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t$included[$key][$type][] = $tmp_dir . $file;\\r\\n\\t\\t\\t\\t\\t\\t\\t$raw[$key][$type] = array();\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\/\\/ Combine and minify files\\r\\n\\t\\t\\tforeach ($included as $key => $value) {\\r\\n\\t\\t\\t\\tforeach ($value as $type => $files) {\\r\\n\\t\\t\\t\\t\\tif (empty($files)) {continue;}\\r\\n\\/\\/\\t\\t\\t\\t\\t$filename = $MinifyX->config[$type.\'Filename\'] . \'_\';\\r\\n\\/\\/\\t\\t\\t\\t\\t$extension = $MinifyX->config[$type.\'Ext\'];\\r\\n\\t\\t\\t\\t\\t$files = $MinifyX->prepareFiles($files, $type);\\r\\n\\t\\t\\t\\t\\t$properties = array(\\r\\n\\t\\t\\t\\t\\t\\t\'minify\' => $MinifyX->config[\'minify\'.ucfirst($type)]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t? \'true\'\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t: \'false\',\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t$result = $MinifyX->Munee($files, $properties);\\r\\n\\t\\t\\t\\t\\tif ($MinifyX->saveFile($result)) {\\r\\n                        $prepared[$key][$type][] = $MinifyX->getFileUrl();\\r\\n                    }\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\/\\/ Combine files by type\\r\\n\\t\\t\\t$final = array(\\r\\n\\t\\t\\t\\t\'head\' => array_merge(\\r\\n\\t\\t\\t\\t\\t$excluded[\'head\'][\'css\'], $prepared[\'head\'][\'css\'], $raw[\'head\'][\'css\'],\\r\\n\\t\\t\\t\\t\\t$excluded[\'head\'][\'js\'], $prepared[\'head\'][\'js\'], $raw[\'head\'][\'js\']\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\'body\' => array_merge(\\r\\n\\t\\t\\t\\t\\t$excluded[\'body\'][\'css\'], $prepared[\'body\'][\'css\'], $raw[\'body\'][\'css\'],\\r\\n\\t\\t\\t\\t\\t$excluded[\'body\'][\'js\'], $prepared[\'body\'][\'js\'], $raw[\'body\'][\'js\']\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\/\\/ Push files to tags\\r\\n\\t\\t\\tforeach ($final as $type => &$value) {\\r\\n\\t\\t\\t\\tforeach ($value as &$file) {\\r\\n\\t\\t\\t\\t\\tif (strpos($file, \'<script\') === false && strpos($file, \'<style\') === false) {\\r\\n\\t\\t\\t\\t\\t\\t$file = preg_match(\'\\/\\\\.css$\\/iu\', $file)\\r\\n\\t\\t\\t\\t\\t\\t\\t? \'<link rel=\\"stylesheet\\" href=\\"\' . $file . \'\\" type=\\"text\\/css\\" \\/>\'\\r\\n\\t\\t\\t\\t\\t\\t\\t: \'<script type=\\"text\\/javascript\\" src=\\"\' . $file . \'\\"><\\/script>\';\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (!empty($excluded[$type][\'html\'])) {\\r\\n\\t\\t\\t\\t\\t$value[] = implode(\\"\\\\n\\", $excluded[$type][\'html\']);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tunset($value);\\r\\n\\r\\n\\t\\t\\t\\/\\/ Replace tags in web page\\r\\n\\t\\t\\t$modx->resource->_output = str_replace(\\r\\n\\t\\t\\t\\tarray($modx->getRegisteredClientStartupScripts() . \\"\\\\n<\\/head>\\", $modx->getRegisteredClientScripts() . \\"\\\\n<\\/body>\\"),\\r\\n\\t\\t\\t\\tarray(implode(\\"\\\\n\\", $final[\'head\']) . \\"\\\\n<\\/head>\\", implode(\\"\\\\n\\", $final[\'body\']) . \\"\\\\n<\\/body>\\"),\\r\\n\\t\\t\\t\\t$modx->resource->_output\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t\\/\\/ Process images\\r\\n\\t\\tif ($modx->getOption(\'minifyx_process_images\', null, false, true)) {\\r\\n\\t\\t\\tif (!$modx->getService(\'minifyx\',\'MinifyX\', MODX_CORE_PATH.\'components\\/minifyx\\/model\\/minifyx\\/\')) {return false;}\\r\\n\\r\\n\\t\\t\\t$connector = $modx->getOption(\'minifyx_connector\', null, \'\\/assets\\/components\\/minifyx\\/munee.php\', true);\\r\\n\\t\\t\\t$exclude = $modx->getOption(\'minifyx_exclude_images\');\\r\\n\\t\\t\\t$replace = array(\'from\' => array(), \'to\' => array());\\r\\n\\t\\t\\t$site_url = $modx->getOption(\'site_url\');\\r\\n\\t\\t\\t$default = $modx->getOption(\'minifyx_images_filters\', null, \'\', true);\\r\\n\\r\\n\\t\\t\\tpreg_match_all(\'\\/<img.*?>\\/i\', $modx->resource->_output, $tags);\\r\\n\\t\\t\\tforeach ($tags[0] as $tag) {\\r\\n\\t\\t\\t\\tif (preg_match($exclude, $tag)) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telseif (preg_match_all(\'\\/(src|height|width|filters)=[\\\\\'|\\"](.*?)[\\\\\'|\\"]\\/i\', $tag, $properties)) {\\r\\n\\t\\t\\t\\t\\tif (count($properties[0]) >= 2) {\\r\\n\\t\\t\\t\\t\\t\\t$file = $connector . \'?files=\';\\r\\n\\t\\t\\t\\t\\t\\t$resize = \'\';\\r\\n\\t\\t\\t\\t\\t\\t$filters = \'\';\\r\\n\\t\\t\\t\\t\\t\\t$tmp = array(\'from\' => array(), \'to\' => array());\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tforeach ($properties[1] as $k => $v) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif ($v == \'src\') {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$src = $properties[2][$k];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (strpos($src, \':\\/\\/\') !== false) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (strpos($src, $site_url) !== false) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$src = str_replace($site_url, \'\', $src);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\/\\/ Image from 3rd party domain\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$file .= $src;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'from\'][\'src\'] = $properties[2][$k];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\telseif ($v == \'height\' || $v == \'width\') {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$resize .=  $v[0] . \'[\'.$properties[2][$k].\']\';\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\telseif ($v == \'filters\') {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$filters .= $properties[2][$k];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'from\'][\'filters\'] = $properties[0][$k];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t$tmp[\'to\'][\'filters\'] = \'\';\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (!empty($tmp[\'from\'][\'src\'])) {\\r\\n\\t\\t\\t\\t\\t\\t\\t$resize .= isset($tmp[\'from\'][\'filters\'])\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t? $filters\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t: $default;\\r\\n\\t\\t\\t\\t\\t\\t\\t$tmp[\'to\'][\'src\'] = $file . \'?resize=\' . $resize;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tksort($tmp[\'from\']);\\r\\n\\t\\t\\t\\t\\t\\t\\tksort($tmp[\'to\']);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t$replace[\'from\'][] = $tag;\\r\\n\\t\\t\\t\\t\\t\\t\\t$replace[\'to\'][] = str_replace($tmp[\'from\'], $tmp[\'to\'], $tag);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!empty($replace)) {\\r\\n\\t\\t\\t\\t$modx->resource->_output = str_replace(\\r\\n\\t\\t\\t\\t\\t$replace[\'from\'],\\r\\n\\t\\t\\t\\t\\t$replace[\'to\'],\\r\\n\\t\\t\\t\\t\\t$modx->resource->_output\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t$modx->log(modX::LOG_LEVEL_INFO, \'[MinifyX] Total time for page \\"\'.$modx->resource->id.\'\\" = \'.(microtime(true) - $time));\\r\\n\\t\\tbreak;\\r\\n}"}',
        'guid' => '36dc8fdcf48c24d4fdc080e69dbb5eba',
        'native_key' => NULL,
        'signature' => 'a291f00603e3c61de15f06f6260a0566',
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            'd982834ef4854b56e0c903058b9f06dc' => 
            array (
              'preserve_keys' => true,
              'update_object' => true,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnWebPagePrerender","priority":0,"propertyset":0}',
              'guid' => '0912b6d622b63b0690f17e9e501f9ae5',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnWebPagePrerender',
              ),
              'signature' => '85006514d6d5174e482dba3790149b07',
            ),
            '47e60172bad66fa1430bb174a36762ed' => 
            array (
              'preserve_keys' => true,
              'update_object' => true,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnSiteRefresh","priority":0,"propertyset":0}',
              'guid' => 'e16f84f913121a35f4c2c81c75ba5314',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnSiteRefresh',
              ),
              'signature' => 'ba16395c996c25ba9a6320b567ca55c4',
            ),
          ),
        ),
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'minifyx',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"minifyx-1.6.0-pl\\/modCategory\\/85ec214754ac043d71ddf8612d316c04\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"minifyx"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"minifyx-1.6.0-pl\\/modCategory\\/85ec214754ac043d71ddf8612d316c04\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"minifyx"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"minifyx-1.6.0-pl\\/modCategory\\/85ec214754ac043d71ddf8612d316c04.resolve.files.resolver","type":"php","name":"resolve.files"}',
    ),
    3 => 
    array (
      'type' => 'php',
      'body' => '{"source":"minifyx-1.6.0-pl\\/modCategory\\/85ec214754ac043d71ddf8612d316c04.resolve.setup.resolver","type":"php","name":"resolve.setup"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '71d29ad8dc21eed2ce364df4c3b3247b',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '85ec214754ac043d71ddf8612d316c04',
  'native_key' => NULL,
  'object' => '{"id":null,"parent":0,"category":"MinifyX","rank":0}',
);